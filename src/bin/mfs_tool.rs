/* This file is part of moulars.
 *
 * moulars is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * moulars is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with moulars.  If not, see <http://www.gnu.org/licenses/>.
 */

// This program converts a moulars .mfs_cache file into a DirtSand .mfs on
// stdout.  It can be useful for debugging, as well as porting data back to
// DirtSand for compatibility/comparison.

#![deny(clippy::all)]
#![deny(clippy::pedantic)]

use std::fs::File;
use std::io::{Cursor, BufReader, BufWriter};
use std::mem::size_of;
use std::path::{Path, PathBuf};
use std::process::ExitCode;

use anyhow::{anyhow, Result};
use clap::{Parser, Subcommand};
use data_encoding::HEXLOWER_PERMISSIVE;
use log::{error, warn};

use moulars::file_srv::Manifest;
use moulars::file_srv::data_cache::cache_clients;
use moulars::plasma::{StreamRead, PakFile};
use moulars::plasma::file_crypt::EncryptedReader;

#[derive(Parser)]
#[command(name = "mfs_tool", version = "1.0", arg_required_else_help = true,
          about = "Tool for updating and debugging manifests for MOULArs")]
struct Args {
    #[command(subcommand)]
    command: Command,
}

#[derive(Subcommand)]
enum Command {
    #[command(about = "Decrypt an encrypted file")]
    Decrypt {
        #[arg(short, long, value_name = "key_value",
              help = "Big Endian key to use for decryption")]
        key: Option<String>,

        #[arg(short, long = "out", value_name = "out_file", conflicts_with = "in_place",
              help = "Write output to file instead of stdout")]
        out_filename: Option<PathBuf>,

        #[arg(short, long, help = "Decrypt file in-place")]
        in_place: bool,

        #[arg(required = true)]
        filename: PathBuf,
    },

    #[command(about = "Dump a cached manifest in DirtSand format")]
    Dump {
        #[arg(required = true)]
        mfs_cache: PathBuf,
    },

    #[command(about = "List the files in an optionally encrypted .pak file")]
    LsPak {
        #[arg(short, long, value_name = "key_value",
              help = "Big Endian key to use for decryption")]
        key: Option<String>,

        #[arg(required = true)]
        pak_file: PathBuf,
    },

    #[command(about = "Update manifests and secure files for the data and auth servers")]
    Update {
        #[arg(long = "python", value_name = "python_exe",
              help = "Path to Python executable for compiling .pak files")]
        python_exe: Option<PathBuf>,

        #[arg(required = true)]
        data_root: PathBuf,
    },
}

fn main() -> ExitCode {
    // Just print log messages generated by the moulars library
    env_logger::Builder::from_env(
        env_logger::Env::default().default_filter_or("info"))
        .format_timestamp(None)
        .format_target(false)
        .init();

    let args = Args::parse();
    match args.command {
        Command::Decrypt { key, out_filename, in_place, filename } => {
            let out_file = if in_place {
                Some(filename.as_path())
            } else {
                out_filename.as_deref()
            };
            if let Err(err) = decrypt_file(&filename, out_file, key.as_deref()) {
                error!("Failed to decrypt {}: {}", filename.display(), err);
                return ExitCode::FAILURE;
            }
        }
        Command::Dump { mfs_cache } => {
            let manifest = match Manifest::from_cache(&mfs_cache) {
                Ok(manifest) => manifest,
                Err(err) => {
                    error!("Failed to load manifest cache: {}", err);
                    return ExitCode::FAILURE;
                }
            };
            for file in manifest.files() {
                println!("{}", file.as_ds_mfs());
            }
        }
        Command::LsPak { key, pak_file } => {
            if let Err(err) = list_pak(&pak_file, key.as_deref()) {
                error!("Failed to load pak file: {}", err);
                return ExitCode::FAILURE;
            }
        }
        Command::Update { python_exe, data_root } => {
            if let Err(err) = cache_clients(&data_root, python_exe.as_deref()) {
                warn!("Failed to update file server cache: {}", err);
            }
        }
    }
    ExitCode::SUCCESS
}

fn get_key(key_opt: Option<&str>) -> Result<[u32; 4]> {
    if let Some(key_str) = key_opt {
        let buffer: [u8; 16] = HEXLOWER_PERMISSIVE.decode(key_str.as_bytes())
                .map_err(|err| anyhow!("Invalid hex literal: {}", err))?
                .try_into().map_err(|_| anyhow!("Invalid key length"))?;
        let mut key = [0; 4];
        for (src, dest) in buffer.chunks_exact(size_of::<u32>()).zip(key.iter_mut()) {
            *dest = u32::from_be_bytes(src.try_into().unwrap());
        }
        Ok(key)
    } else {
        Ok(moulars::plasma::file_crypt::DEFAULT_KEY)
    }
}

fn decrypt_file(path: &Path, out_file: Option<&Path>, key_opt: Option<&str>) -> Result<()> {
    let key = get_key(key_opt)?;
    let mut stream = EncryptedReader::new(BufReader::new(File::open(path)?), &key)?;
    if let Some(out_filename) = out_file {
        if out_filename.exists() &&
                std::fs::canonicalize(out_filename)? == std::fs::canonicalize(path)?
        {
            // The files are the same, so we need to decrypt it in memory first...
            let mut in_stream = Cursor::new(Vec::new());
            std::io::copy(&mut stream, &mut in_stream)?;
            drop(stream);

            in_stream.set_position(0);
            let mut out_stream = BufWriter::new(File::create(out_filename)?);
            std::io::copy(&mut in_stream, &mut out_stream)?;
        } else {
            let mut out_stream = BufWriter::new(File::create(out_filename)?);
            std::io::copy(&mut stream, &mut out_stream)?;
        };
    } else {
        std::io::copy(&mut stream, &mut std::io::stdout())?;
    }
    Ok(())
}

fn list_pak(path: &Path, key_opt: Option<&str>) -> Result<()> {
    let key = get_key(key_opt)?;
    let file_reader = BufReader::new(File::open(path)?);
    let mut stream = BufReader::new(EncryptedReader::new(file_reader, &key)?);
    let pak_file = PakFile::stream_read(&mut stream)?;
    for file in pak_file.files() {
        println!("{}", file.name());
    }
    Ok(())
}
